        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cctype>
        -:    4:
        -:    5:using std::string;
        -:    6:
        -:    7:/*
        -:    8:  The function receives a string counts how many times the same character 
        -:    9:  occurs at the beginning of the string, before any other characters (or the
        -:   10:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   11:  'z' and any ASCII characters are allowed.
        -:   12:*/
        1:   13:int Password::count_leading_characters(string phrase){
        1:   14:  int repetition = 1;
        1:   15:  int index = 0;
       1*:   16:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
    #####:   17:    repetition++;
    #####:   18:    index++;
        -:   19:  }
        1:   20:  return repetition;
        -:   21:}
        -:   22:
        1:   23:int Password::has_numbers(string phrase){
        1:   24:  int amountNumbers = 0;
       10:   25:  for (int i = 0; i < phrase.length(); i++)
        -:   26:  {
        9:   27:    if(isdigit(phrase[i]))
        1:   28:      amountNumbers++;
        -:   29:  }
        1:   30:  return amountNumbers;
        -:   31:}
        -:   32:
        -:   33:// Implementation A
    #####:   34:bool has_mixed_case(string str)
        -:   35:{
    #####:   36:  bool has_lower = false;
    #####:   37:  bool has_upper = false;
    #####:   38:  for (char ch : str)
        -:   39:  {
    #####:   40:    if (std::islower(ch))
        -:   41:    {
    #####:   42:      has_lower = true;
        -:   43:    }
    #####:   44:    else if (std::isupper(ch))
        -:   45:    {
    #####:   46:      has_upper = true;
        -:   47:    }
        -:   48:  }
    #####:   49:  return has_lower && has_upper;
        -:   50:}
        -:   51:
